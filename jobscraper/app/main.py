# main.py
# Punto de entrada principal de la aplicaci√≥n FastAPI
# Aqu√≠ se configurar√° la aplicaci√≥n, middlewares, rutas y se iniciar√° el servidor
# IMPLEMENTADO: Aplicaci√≥n FastAPI completa con middlewares, CORS, manejo de errores

from fastapi import FastAPI, Request, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.responses import JSONResponse
from fastapi.exceptions import RequestValidationError
from starlette.exceptions import HTTPException as StarletteHTTPException
from contextlib import asynccontextmanager
import time
import logging
from typing import Union

from .core.config import settings
from .database.connection import create_tables
from .api import routes


# Configurar logging
logging.basicConfig(
    level=getattr(logging, settings.LOG_LEVEL),
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler(settings.LOG_FILE),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Gesti√≥n del ciclo de vida de la aplicaci√≥n.
    Se ejecuta al inicio y al cierre de la aplicaci√≥n.
    """
    # Startup
    logger.info("üöÄ Iniciando JobScraper API...")
    
    # Crear tablas de base de datos si no existen
    try:
        create_tables()
        logger.info("‚úÖ Tablas de base de datos verificadas/creadas")
    except Exception as e:
        logger.error(f"‚ùå Error al crear tablas: {e}")
        raise
    
    logger.info(f"üåê API disponible en: http://localhost:8000")
    logger.info(f"üìö Documentaci√≥n en: http://localhost:8000/docs")
    logger.info(f"üîß Configuraci√≥n: {settings.PROJECT_NAME} v{settings.VERSION}")
    
    yield
    
    # Shutdown
    logger.info("üõë Cerrando JobScraper API...")


# Crear aplicaci√≥n FastAPI
app = FastAPI(
    title=settings.PROJECT_NAME,
    version=settings.VERSION,
    description="""
    **JobScraper API** - Backend para scraping y gesti√≥n de ofertas laborales
    
    ## Caracter√≠sticas
    
    * **Gesti√≥n de usuarios** con autenticaci√≥n JWT
    * **Scraping automatizado** de m√∫ltiples sitios web
    * **B√∫squeda avanzada** de ofertas laborales con filtros
    * **Tracking de interacciones** y historial de b√∫squedas
    * **Estad√≠sticas y analytics** detallados
    * **API REST completa** con documentaci√≥n autom√°tica
    
    ## Autenticaci√≥n
    
    La API utiliza **JWT (JSON Web Tokens)** para autenticaci√≥n.
    Incluye el token en el header: `Authorization: Bearer <token>`
    
    ## Rate Limiting
    
    * **60 requests/minuto** por IP
    * **1000 requests/hora** por IP
    
    ## Soporte
    
    Para soporte t√©cnico, contacta al equipo de desarrollo.
    """,
    openapi_url=f"{settings.API_V1_STR}/openapi.json",
    docs_url="/docs",
    redoc_url="/redoc",
    lifespan=lifespan
)


# ==================== MIDDLEWARES ====================

# CORS Middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.BACKEND_CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"],
    allow_headers=["*"],
)

# Trusted Host Middleware (seguridad)
if not settings.DEBUG:
    app.add_middleware(
        TrustedHostMiddleware,
        allowed_hosts=["localhost", "127.0.0.1", "*.yourdomain.com"]
    )


# Middleware personalizado para logging de requests
@app.middleware("http")
async def log_requests(request: Request, call_next):
    """
    Middleware para logging de todas las requests.
    """
    start_time = time.time()
    
    # Log de request entrante
    logger.info(f"üì• {request.method} {request.url.path} - IP: {request.client.host}")
    
    # Procesar request
    response = await call_next(request)
    
    # Calcular tiempo de procesamiento
    process_time = time.time() - start_time
    
    # Log de response
    logger.info(
        f"üì§ {request.method} {request.url.path} - "
        f"Status: {response.status_code} - "
        f"Time: {process_time:.3f}s"
    )
    
    # Agregar header con tiempo de procesamiento
    response.headers["X-Process-Time"] = str(process_time)
    
    return response


# ==================== MANEJADORES DE ERRORES ====================

@app.exception_handler(StarletteHTTPException)
async def http_exception_handler(request: Request, exc: StarletteHTTPException):
    """
    Manejador personalizado para errores HTTP.
    """
    logger.error(f"‚ùå HTTP Error {exc.status_code}: {exc.detail} - Path: {request.url.path}")
    
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "error": True,
            "message": exc.detail,
            "status_code": exc.status_code,
            "path": str(request.url.path),
            "timestamp": time.time()
        }
    )


@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    """
    Manejador personalizado para errores de validaci√≥n de Pydantic.
    """
    logger.error(f"‚ùå Validation Error: {exc.errors()} - Path: {request.url.path}")
    
    return JSONResponse(
        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
        content={
            "error": True,
            "message": "Error de validaci√≥n en los datos enviados",
            "details": exc.errors(),
            "status_code": 422,
            "path": str(request.url.path),
            "timestamp": time.time()
        }
    )


@app.exception_handler(Exception)
async def general_exception_handler(request: Request, exc: Exception):
    """
    Manejador general para errores no capturados.
    """
    logger.error(f"üí• Unexpected Error: {str(exc)} - Path: {request.url.path}", exc_info=True)
    
    # En producci√≥n, no mostrar detalles del error
    if settings.DEBUG:
        error_detail = str(exc)
    else:
        error_detail = "Error interno del servidor"
    
    return JSONResponse(
        status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
        content={
            "error": True,
            "message": error_detail,
            "status_code": 500,
            "path": str(request.url.path),
            "timestamp": time.time()
        }
    )


# ==================== RUTAS PRINCIPALES ====================

@app.get("/", tags=["Root"])
async def root():
    """
    Endpoint ra√≠z de la API.
    Retorna informaci√≥n b√°sica de la aplicaci√≥n.
    """
    return {
        "message": f"Bienvenido a {settings.PROJECT_NAME} API",
        "version": settings.VERSION,
        "status": "running",
        "docs": "/docs",
        "redoc": "/redoc",
        "api_v1": settings.API_V1_STR,
        "timestamp": time.time()
    }


@app.get("/health", tags=["Health"])
async def health_check():
    """
    Endpoint de health check para monitoreo.
    """
    return {
        "status": "healthy",
        "service": settings.PROJECT_NAME,
        "version": settings.VERSION,
        "timestamp": time.time(),
        "environment": "development" if settings.DEBUG else "production"
    }


@app.get("/info", tags=["Info"])
async def app_info():
    """
    Informaci√≥n detallada de la aplicaci√≥n.
    """
    return {
        "name": settings.PROJECT_NAME,
        "version": settings.VERSION,
        "description": "Backend para scraping y gesti√≥n de ofertas laborales",
        "api_version": "v1",
        "docs_url": "/docs",
        "redoc_url": "/redoc",
        "openapi_url": f"{settings.API_V1_STR}/openapi.json",
        "cors_origins": settings.BACKEND_CORS_ORIGINS,
        "rate_limits": {
            "per_minute": settings.RATE_LIMIT_PER_MINUTE,
            "per_hour": settings.RATE_LIMIT_PER_HOUR
        },
        "features": [
            "Gesti√≥n de usuarios con JWT",
            "Scraping automatizado",
            "B√∫squeda avanzada de ofertas",
            "Tracking de interacciones",
            "Estad√≠sticas y analytics",
            "API REST completa"
        ],
        "timestamp": time.time()
    }


# ==================== INCLUIR ROUTERS ====================

# Incluir todas las rutas de la API v1
app.include_router(
    routes.router,
    prefix=settings.API_V1_STR,
    tags=["API v1"]
)


# ==================== CONFIGURACI√ìN ADICIONAL ====================

# Configurar headers de seguridad
@app.middleware("http")
async def add_security_headers(request: Request, call_next):
    """
    Agregar headers de seguridad a todas las responses.
    """
    response = await call_next(request)
    
    # Headers de seguridad
    response.headers["X-Content-Type-Options"] = "nosniff"
    response.headers["X-Frame-Options"] = "DENY"
    response.headers["X-XSS-Protection"] = "1; mode=block"
    response.headers["Referrer-Policy"] = "strict-origin-when-cross-origin"
    
    # Header personalizado
    response.headers["X-API-Version"] = settings.VERSION
    response.headers["X-Powered-By"] = settings.PROJECT_NAME
    
    return response


# ==================== EVENTOS DE APLICACI√ìN ====================

@app.on_event("startup")
async def startup_event():
    """
    Evento que se ejecuta al iniciar la aplicaci√≥n.
    Configuraciones adicionales de startup.
    """
    logger.info("üîß Configurando servicios adicionales...")
    
    # Aqu√≠ se pueden agregar configuraciones adicionales como:
    # - Conexi√≥n a Redis
    # - Inicializaci√≥n de servicios externos
    # - Configuraci√≥n de tareas en background
    
    logger.info("‚úÖ Servicios adicionales configurados")


@app.on_event("shutdown")
async def shutdown_event():
    """
    Evento que se ejecuta al cerrar la aplicaci√≥n.
    Limpieza de recursos.
    """
    logger.info("üßπ Limpiando recursos...")
    
    # Aqu√≠ se pueden agregar tareas de limpieza como:
    # - Cerrar conexiones a servicios externos
    # - Guardar estado de la aplicaci√≥n
    # - Cancelar tareas en background
    
    logger.info("‚úÖ Recursos limpiados correctamente")


# ==================== CONFIGURACI√ìN PARA DESARROLLO ====================

if __name__ == "__main__":
    import uvicorn
    
    logger.info("üöÄ Iniciando servidor de desarrollo...")
    
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=settings.DEBUG,
        log_level=settings.LOG_LEVEL.lower(),
        access_log=True
    )